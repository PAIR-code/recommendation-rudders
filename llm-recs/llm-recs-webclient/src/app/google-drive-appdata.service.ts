/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an Apache2 license that can be
 * found in the LICENSE file and http://www.apache.org/licenses/LICENSE-2.0
==============================================================================*/
import { Injectable } from '@angular/core';
import { environment } from 'src/environments/environment';

export interface ErrorObj {
  error: string;
}

export interface GoogleSheetsStatus<T> {
  status: number;
  result?: T;
  statusText?: string;
}

interface UploadResponse {
}

// export interface SheetsValues {
//   values: string[][];
// }

// interface BaseDriveRequest {
//   /** OAuth access token. */
//   access_token?: string;
//   // /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
//   // key?: string;
//   // /** OAuth 2.0 token for the current user. */
//   // oauth_token?: string;
// }

// export interface CreateRequest extends BaseDriveRequest {
//   // /** Upload protocol for media (e.g. "raw", "multipart"). */
//   // upload_protocol?: string;
//   /**
//    * media - Simple upload. Upload the media only, without any metadata.
//    * multipart - Multipart upload. Upload both the media and its metadata, in a single request.
//    * resumable - Resumable upload. Upload the file in a resumable fashion, using a series of at least two requests where the first request includes the metadata.
//    * */
//   uploadType?: string;
//   /** Request body */
//   resource: gapi.client.drive.File;
// };


const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';

const SCOPE = 'https://www.googleapis.com/auth/drive.appdata';

@Injectable({
  providedIn: 'root'
})
export class GoogleDriveAppdataService {
  onceReady: Promise<void>;

  constructor() {
    this.onceReady = new Promise(
      (resolve, _reject) => {
        gapi.load('client', async () => {
          await gapi.client.init({
            apiKey: environment.driveApiKey,
            discoveryDocs: [DISCOVERY_DOC],
          });
          resolve();
        });
      });
  }


  async saveData(
    jsonData: string,
    name: string,
    description: string,
    accessToken?: google.accounts.oauth2.TokenResponse | null
  ) {
    await this.onceReady;

    // Boundary must be a string that is not confused with anything else...
    // Generated by `$ echo "$(dd if=/dev/urandom bs=1 count=32 | xxd -l 16 -p)"`
    const boundary = `7b0b5c0a693503324e88a977b6121ee0`;
    const boundarySeparator = `--${boundary}`;
    const metaDataMimeType = 'application/json; charset=UTF-8';
    const contentDataMimeType = 'application/json; charset=UTF-8';
    const metadata = {
      name,
      // description,
      mimeType: contentDataMimeType
    };

    const multipartRequestBody =
      `\n${boundarySeparator}\n` +
      `Content-Type: ${metaDataMimeType}\n` +
      `\n` +
      JSON.stringify(metadata) +
      `\n${boundarySeparator}\n` +
      `Content-Type: ${contentDataMimeType}\n` +
      `Content-Transfer-Encoding: BINARY\n` +
      `\n` +
      jsonData +
      `\n${boundarySeparator}--`;

    // For binary data, base64 encoded...
    // \nContent-Type: ${file.type || 'application/octet-stream'}\
    // \nContent-Transfer-Encoding: base64\

    const request = gapi.client.request({
      path: '/upload/drive/v3/files',
      method: 'POST',
      params: {
        // multipart = upload metadata and data in a single upload.
        uploadType: 'multipart'
      },
      headers: {
        // The gapi.client request handles auth/credentials, cores, cache, etc.
        // 'Authorization': `Bearer ${accessToken?.access_token}`,
        'Content-Type': `multipart/related; boundary="${boundary}"`,
        'Content-Length': `${multipartRequestBody.length}`
      },
      body: multipartRequestBody
    });
    // mode: 'cors', // no-cors, *cors, same-origin
    // credentials: 'same-origin', // include, *same-origin, omit
    // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
    // redirect: 'follow', // manual, *follow, error
    // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin,

    const response = await new Promise<gapi.client.Response<UploadResponse>>(
      (resolve, _reject) => request.execute(resolve));

    console.log('status:', response.status);
    console.log('statusText:', response.statusText);
    console.log('result:', response.result);

  }
  /*
      const multipartRequestBody =
        delimiter +
        'Content-Type: application/json\r\n\r\n' +
        JSON.stringify(metadata) +
        delimiter +
        'Content-Type: ' + contentType + '\r\n\r\n' +
        data +
        close_delim;

      const request = gapi.client.request({
          path: '/upload/drive/v3/files',
          method: 'POST',
          params: {'uploadType': 'multipart'},
          headers: {
            'Content-Type': 'multipart/related; boundary="' + boundary + '"'
          },
          'body': multipartRequestBody});
      if (!callback) {
        callback = function(file) {
          console.log(file)
        };
      }
      request.execute(callback);

  /*
  var createFileWithJSONContent = function(name,data,callback) {
    const boundary = '-------314159265358979323846';
    const delimiter = "\r\n--" + boundary + "\r\n";
    const close_delim = "\r\n--" + boundary + "--";

    const contentType = 'application/json';

    var metadata = {
        'name': name,
        'mimeType': contentType
      };

      var multipartRequestBody =
          delimiter +
          'Content-Type: application/json\r\n\r\n' +
          JSON.stringify(metadata) +
          delimiter +
          'Content-Type: ' + contentType + '\r\n\r\n' +
          data +
          close_delim;

      var request = gapi.client.request({
          'path': '/upload/drive/v3/files',
          'method': 'POST',
          'params': {'uploadType': 'multipart'},
          'headers': {
            'Content-Type': 'multipart/related; boundary="' + boundary + '"'
          },
          'body': multipartRequestBody});
      if (!callback) {
        callback = function(file) {
          console.log(file)
        };
      }
      request.execute(callback);
  }
  */

  /*
    async saveData(
      data: Blob, name: string,
      description: string,
      accessToken?: google.accounts.oauth2.TokenResponse | null
    ) {
      await this.onceReady;

      const file: gapi.client.drive.File = {
        description,
        mimeType: 'application/json',
        name,
        media: {
          mimeType: 'application/json',
          body: bufferStream,
        },
        requestBody: {
            name: fileObject.originalname,
            parents: ["1OocQkL2Yd-w_l_YEfnG1C5lx6HpNOY"],
        },
        fields: "id,name",

        // size: "8",
      };

      const request = {
        uploadType: 'media',
        resource: file,
      } as CreateRequest;
      if (accessToken) {
        request.access_token = accessToken.access_token;
      }

      const response = gapi.client.drive.files.create(request);

      const bufferStream = new stream.PassThrough();
      bufferStream.end(fileObject.buffer);

      const response = gapi.client.drive.files.create(request);

      const { data } = await google.drive({ version: "v3", auth }).files.create({
          media: {
              mimeType: fileObject.mimeType,
              body: bufferStream,
          },
          requestBody: {
              name: fileObject.originalname,
              parents: ["1OocQkL2Yd-w_l_YEfnG1C5lx6HpNOY"],
          },
          fields: "id,name",
      });

    }
  */

}
